/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* replaceValueInTree(TreeNode* root) {
        queue<TreeNode*> q;
        q.push(root);
        root->val = 0;

        while(!q.empty()) {
            int n = q.size();
            vector<TreeNode*> lev;
            int sum = 0;

            for(int i = 0; i < n; i++) {
                auto temp = q.front();
                q.pop();
                lev.push_back(temp);

                if(temp->left) {
                    q.push(temp->left);
                    sum += temp->left->val;
                }
                if(temp->right) {
                    q.push(temp->right);
                    sum += temp->right->val;
                }
            }

            for(auto node : lev) {
                int newSum = sum;

                if(node->left) newSum -= node->left->val;
                if(node->right) newSum -= node->right->val;

                if(node->left) node->left->val = newSum;
                if(node->right) node->right->val = newSum;
            }
        }
        return root;
    }
};
